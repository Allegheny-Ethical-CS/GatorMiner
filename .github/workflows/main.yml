name: Tests
on: [push, pull_request]


jobs:
  build:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS]
        python-version: [3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      id: setup-python
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Pipenv
      uses: dschep/install-pipenv-action@v1
    - name: Install dependencies
      run: |
        # install dependencies according to the lock file
        pipenv install --dev --ignore-pipfile --python ${{ steps.setup-python.outputs.python-version }}
        pipenv run python -m spacy download en_core_web_sm
    - name: Run test with pytest
      run: |
        pipenv run pytest tests --cov-config pytest.cov --cov
    - name: Lint with flake8
      run: |
        pipenv run flake8 src
        pipenv run flake8 tests
    - name: Lint with pylint
      run: |
        pipenv run pylint src
        pipenv run pylint tests
---        
name: Docker Build

on:
  schedule: 
      - cron: "* */24 * * *"
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - master

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          version: $(date %Y%m%d%H%M%S).git.$GIT_REVISION
          push: true
          tags: bennywestsyde/gatorminer:${{ steps.docker_build.version }}
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}